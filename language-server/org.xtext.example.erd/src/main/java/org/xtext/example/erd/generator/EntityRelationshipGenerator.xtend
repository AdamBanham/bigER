/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.erd.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.erd.entityRelationship.Attribute
import org.xtext.example.erd.entityRelationship.Model
import org.xtext.example.erd.entityRelationship.Entity
import org.xtext.example.erd.entityRelationship.DataType
import org.xtext.example.erd.entityRelationship.AttributeType
import org.xtext.example.erd.entityRelationship.Relationship
import java.util.Set
import java.util.List

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class EntityRelationshipGenerator extends AbstractGenerator {

	//List<Relationship> weakRelationships;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val diagram = resource.contents.get(0) as Model
		
		// Do not generate if generateSql is not set
		if (diagram.generateSql === null) {
			return
		}

		// TODO: Weak entities, ternary relationships

		val name = (diagram.name ?: 'output') + '.sql'
		//this.weakRelationships = diagram.relationships.reject[it.weak !== null].toList;
		
		fsa.generateFile(name, '''
			«FOR entity : diagram.entities.reject[it.isWeak]»
				CREATE TABLE «entity.name» (
					«FOR attribute : entity.allAttributes.reject[it.type === AttributeType.DERIVED] SEPARATOR ', '»
						«attribute.name» «attribute.datatype.transformType» «IF attribute.type === AttributeType.KEY»PRIMARY KEY«ENDIF» «IF attribute.type !== AttributeType.NULLABLE»NOT NULL«ENDIF»		
					«ENDFOR»
				);«'\n'»«'\n'»
			«ENDFOR»
			«FOR relationship : diagram.relationships.reject[it.isWeak || it.left === null]»
				CREATE TABLE «relationship.name» (
					«relationship.leftKey.name» «relationship.leftKey.datatype.transformType»,
					CONSTRAINT fk_«relationship.leftKey.name» FOREIGN KEY («relationship.leftKey.name»)
						REFERENCES «relationship.left.target.name»(«relationship.leftKey.name»),
					«relationship.rightKey.name» «relationship.rightKey.datatype.transformType»,
					CONSTRAINT fk_«relationship.rightKey.name» FOREIGN KEY («relationship.rightKey.name»)
						REFERENCES «relationship.right.target.name»(«relationship.rightKey.name»)
				);«'\n'»«'\n'»
			«ENDFOR»
			'''
			)
			
		}

		private def transformType(DataType type) {
		switch (type) {
			// Default if no datatype is specified
			case DataType.NONE: {
				return 'varchar(255)'
			}
			case DataType.BOOLEAN: {
				return 'bit'
			}
			case DataType.DATETIME: {
				return 'datetime'
			}
			case DataType.DOUBLE: {
				return 'real'
			}
			case DataType.INT: {
				return 'int'
			}
			case DataType.STRING: {
				return 'varchar(255)'
			}
		}
	}

	// Useful for extended and weak entities
	private def Set<Attribute> getAllAttributes(Entity entity) {
		val attributes = newHashSet
		attributes += entity.attributes
		if(entity.extends !== null) {
			attributes += entity.extends.allAttributes
		}

		return attributes
	}

	/*
	private def Entity getStrongEntity(Entity entity) {
		val relationships = weakRelationships.reject[it.right.target !== entity]
		for(Relationship r : relationships) {
			if(r.left.target !== null) {
				return r.left.target
			}
		}
	}
	
	private def getStrongKey(Entity entity) {
		val relationships = weakRelationships.reject[it.right.target !== entity]
		for(Relationship r : relationships) {
			return r.leftKey
		}
	}*/

	private def getLeftKey(Relationship relationship) {
		val entity = relationship.left.target
		for(Attribute a : entity.attributes) {
			if (a.type === AttributeType.KEY) {
				return a
			}
		}
	}

	private def getRightKey(Relationship relationship) {
		val entity = relationship.right.target
		for(Attribute a : entity.attributes) {
			if (a.type === AttributeType.KEY) {
				return a
			}
		}
	}
		
		/*
		TODO: reimplement Generator

		val diagram = resource.contents.get(0) as Model
		fsa.generateFile('test.sql', '''
			«FOR entity : diagram.entities»
				CREATE TABLE «entity.name» (
«««					Only non-transient attributes are serialized
					«FOR attribute : entity.attributes»
						«attribute.name» «attribute.datatype.transformType» «IF attribute.type === AttributeType.KEY»PRIMARY KEY«ENDIF»
					«ENDFOR»
				);
			«ENDFOR»
			«FOR relationship : diagram.relationships»
				CREATE TABLE «relationship.name» (
					«relationship.leftKey.name» «relationship.leftKey.datatype.transformType»,
					CONSTRAINT fk_«relationship.leftKey.name» FOREIGN KEY («relationship.leftKey.name»)
						REFERENCES «relationship.left.target.name»(«relationship.leftKey.name»),
					«relationship.rightKey.name» «relationship.rightKey.datatype.transformType»,
					CONSTRAINT fk_«relationship.rightKey.name» FOREIGN KEY («relationship.rightKey.name»)
						REFERENCES «relationship.right.target.name»(«relationship.rightKey.name»)
				);
			«ENDFOR»
		'''
		)*/

}
