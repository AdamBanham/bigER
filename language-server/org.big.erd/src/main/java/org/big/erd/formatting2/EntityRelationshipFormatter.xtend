/*
 * generated by Xtext 2.27.0
 */
package org.big.erd.formatting2

import org.big.erd.entityRelationship.Entity
import org.big.erd.entityRelationship.Model
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

import static org.big.erd.entityRelationship.EntityRelationshipPackage.Literals.*
import org.big.erd.entityRelationship.Relationship

class EntityRelationshipFormatter extends AbstractFormatter2 {
	
	//@Inject extension EntityRelationshipGrammarAccess

	def dispatch void format(Model model, extension IFormattableDocument document) {
		// Model header
		model.regionFor.feature(MODEL__NAME).surround[oneSpace]
		model.regionFor.feature(MODEL__NAME).append[setNewLines(1, 1, 2)]
		
		// Options
		model.generateOption.append[setNewLines(1, 1, 2)]
		model.notation.append[setNewLines(1, 1, 2)]
		
		// Entity
		for (entity : model.entities) {
			entity.format
		}
		// Relationship
		for (relationship : model.relationships) {
			relationship.format
		}
	}

	def dispatch void format(Entity entity, extension IFormattableDocument document) {
		entity.regionFor.feature(ENTITY__NAME).surround[oneSpace]
		
		val open = entity.regionFor.keyword("{")
		val close = entity.regionFor.keyword("}")
		if (entity.attributes.length > 0) {
			open.append[newLine]
		}
		interior(open, close)[indent]
		
		for (attribute : entity.attributes) {
			attribute.append[setNewLines(1, 1, 2)]
		}
	}
	
	def dispatch void format(Relationship relationship, extension IFormattableDocument document) {
		relationship.regionFor.feature(RELATIONSHIP__NAME).surround[oneSpace]
		
		val open = relationship.regionFor.keyword("{")
		val close = relationship.regionFor.keyword("}")
		if (relationship.attributes.length > 0 || relationship.first !== null) {
			open.append[newLine]
		}
		interior(open, close)[indent]
		
		for (attribute : relationship.attributes) {
			attribute.append[setNewLines(1, 1, 2)]
		}
		
		val relation = relationship.regionFor.keyword("->")
		relation.surround[oneSpace]
	}
}
